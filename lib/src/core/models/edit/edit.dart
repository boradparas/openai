import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';

import 'package:meta/meta.dart';
import 'sub_models/choice.dart';
import 'sub_models/usage.dart';

export 'sub_models/choice.dart';
export 'sub_models/usage.dart';

part 'edit.g.dart';

/// {@template openai_edit_model}
/// This class is used to represent an OpenAI edit.
/// {@endtemplate}
@immutable
@JsonSerializable(explicitToJson: true)
class OpenAIEditModel extends Equatable {
  /// {@macro openai_edit_model}
  const OpenAIEditModel({
    required this.created,
    required this.choices,
    required this.usage,
  });

  /// Factory constructor for creating a new `OpenAIEditModel` instance from a JSON map.
  factory OpenAIEditModel.fromJson(Map<String, dynamic> json) =>
      _$OpenAIEditModelFromJson(json);

  /// The [choices] generated by the edit.
  @JsonKey(name: 'choices')
  final List<OpenAIEditModelChoice> choices;

  /// The date the edit was [created].
  @JsonKey(
    name: 'created',
    fromJson: _fromJsonCreated,
    toJson: _toJsonCreated,
  )
  final DateTime created;

  /// The [usage] of the edit, if any.
  @JsonKey(name: 'usage')
  final OpenAIEditModelUsage? usage;

  @override
  List<Object?> get props => [created, choices, usage];

  @override
  String toString() =>
      'OpenAIEditModel(created: $created, choices: $choices, usage: $usage)';

  /// Whether the edit has at least one choice in [choices].
  bool get haveChoices => choices.isNotEmpty;

  /// Whether the edit has usage information.
  bool get haveUsage => usage != null;

  /// Converts the instance to a JSON map.
  Map<String, dynamic> toJson() => _$OpenAIEditModelToJson(this);

  /// Custom fromJson function for the 'created' field.
  static DateTime _fromJsonCreated(int timestamp) =>
      DateTime.fromMillisecondsSinceEpoch(timestamp * 1000);

  /// Custom toJson function for the 'created' field.
  static int _toJsonCreated(DateTime date) =>
      date.millisecondsSinceEpoch ~/ 1000;
}
