import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:meta/meta.dart';

part 'choice.g.dart';

/// {@template openai_completion_model_choice_model}
/// This class is used to represent a choice generated by a completion request.
/// {@endtemplate}
@immutable
@JsonSerializable(explicitToJson: true)
class OpenAICompletionModelChoice extends Equatable {
  /// {@macro openai_completion_model_choice_model}
  const OpenAICompletionModelChoice({
    required this.text,
    required this.index,
    this.logprobs,
    this.finishReason,
  });

  /// Factory constructor for creating a new `OpenAICompletionModelChoice` instance from a JSON map.
  factory OpenAICompletionModelChoice.fromJson(Map<String, dynamic> json) =>
      _$OpenAICompletionModelChoiceFromJson(json);

  /// Creates a new instance from a map.
  factory OpenAICompletionModelChoice.fromMap(Map<String, dynamic> map) =>
      OpenAICompletionModelChoice.fromJson(map);

  /// The reason the completion finished.
  @JsonKey(name: 'finishReason')
  final String? finishReason;

  /// The index of the choice.
  @JsonKey(name: 'index')
  final int index;

  /// The log probabilities of the tokens in the completion.
  @JsonKey(name: 'logprobs')
  final int? logprobs;

  /// The text generated by the completion.
  @JsonKey(name: 'text')
  final String text;

  @override
  List<Object?> get props => [text, index, logprobs, finishReason];

  @override
  String toString() {
    return 'OpenAICompletionModelChoice(text: $text, index: $index, logprobs: $logprobs, finishReason: $finishReason)';
  }

  /// Converts the `OpenAICompletionModelChoice` instance to a JSON map.
  Map<String, dynamic> toJson() => _$OpenAICompletionModelChoiceToJson(this);

  /// Whether the choice has log probabilities.
  bool get haveLogprobs => logprobs != null;

  /// Whether the choice has a finish reason.
  bool get haveFinishReason => finishReason != null;
}
