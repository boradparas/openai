import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:meta/meta.dart';

import 'sub_models/choices.dart';

export 'sub_models/choices.dart';

part 'completion.g.dart';

/// {@template openai_stream_completion_model}
/// This class is used to represent an OpenAI stream completion.
/// {@endtemplate}
@immutable
@JsonSerializable(explicitToJson: true)
class OpenAIStreamCompletionModel extends Equatable {
  /// {@macro openai_stream_completion_model}
  const OpenAIStreamCompletionModel({
    required this.id,
    required this.created,
    required this.choices,
    required this.model,
    this.systemFingerprint,
  });

  /// Creates a new instance from a JSON map.
  factory OpenAIStreamCompletionModel.fromJson(Map<String, dynamic> json) =>
      _$OpenAIStreamCompletionModelFromJson(json);

  /// The [choices] generated by the completion.
  @JsonKey(name: 'choices')
  final List<OpenAIStreamCompletionModelChoice> choices;

  /// The date the completion was [created].
  @JsonKey(name: 'created', fromJson: _fromJsonCreated, toJson: _toJsonCreated)
  final DateTime created;

  /// The [id]entifier of the completion.
  @JsonKey(name: 'id')
  final String id;

  /// The [model] used to generate the completion.
  @JsonKey(name: 'model')
  final String model;

  /// The system fingerprint of the completion.
  @JsonKey(name: 'system_fingerprint')
  final String? systemFingerprint;

  @override
  List<Object?> get props => [id, created, choices, model, systemFingerprint];

  @override
  String toString() {
    return 'OpenAIStreamCompletionModel(id: $id, created: $created, choices: $choices, model: $model, systemFingerprint: $systemFingerprint)';
  }

  /// Whether the completion has at least one choice in [choices].
  bool get haveChoices => choices.isNotEmpty;

  /// Whether the completion has a system fingerprint.
  bool get haveSystemFingerprint => systemFingerprint != null;

  /// Converts the instance to a JSON map.
  Map<String, dynamic> toJson() => _$OpenAIStreamCompletionModelToJson(this);

  /// Custom fromJson function for 'created' field.
  static DateTime _fromJsonCreated(int timestamp) =>
      DateTime.fromMillisecondsSinceEpoch(timestamp * 1000);

  /// Custom toJson function for 'created' field.
  static int _toJsonCreated(DateTime date) =>
      date.millisecondsSinceEpoch ~/ 1000;
}
