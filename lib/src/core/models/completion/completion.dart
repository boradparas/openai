import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:meta/meta.dart';

import '../../../instance/completion/completion.dart';
import 'sub_models/choice.dart';
import 'sub_models/usage.dart';

export 'stream/completion.dart';
export 'sub_models/choice.dart';
export 'sub_models/usage.dart';

part 'completion.g.dart';

/// {@template openai_completion_model}
/// This represents the response from a completion request by the [OpenAICompletion] methods.
/// {@endtemplate}
@immutable
@JsonSerializable(explicitToJson: true)
class OpenAICompletionModel extends Equatable {
  /// {@macro openai_completion_model}
  const OpenAICompletionModel({
    required this.id,
    required this.created,
    required this.model,
    required this.choices,
    this.usage,
    this.systemFingerprint,
  });

  /// Factory constructor for creating a new `OpenAICompletionModel` instance from a JSON map.
  factory OpenAICompletionModel.fromJson(Map<String, dynamic> json) =>
      _$OpenAICompletionModelFromJson(json);

  /// The choices generated by the completion.
  @JsonKey(name: 'choices')
  final List<OpenAICompletionModelChoice> choices;

  /// The date the completion was created.
  @JsonKey(
    name: 'created',
    fromJson: _fromJsonCreated,
    toJson: _toJsonCreated,
  )
  final DateTime created;

  /// The identifier of the completion.
  @JsonKey(name: 'id')
  final String id;

  /// The model used to generate the completion.
  @JsonKey(name: 'model')
  final String model;

  /// The system fingerprint of the completion, if any.
  @JsonKey(name: 'system_fingerprint')
  final String? systemFingerprint;

  /// The usage of the completion, if any.
  @JsonKey(name: 'usage')
  final OpenAICompletionModelUsage? usage;

  @override
  List<Object?> get props => [
        id,
        created,
        model,
        choices,
        usage,
        systemFingerprint,
      ];

  @override
  String toString() {
    return 'OpenAICompletionModel(id: $id, created: $created, model: $model, choices: $choices, usage: $usage, systemFingerprint: $systemFingerprint)';
  }

  /// Converts the instance to a JSON map.
  Map<String, dynamic> toJson() => _$OpenAICompletionModelToJson(this);

  /// Whether the completion has at least one choice in [choices].
  bool get haveChoices => choices.isNotEmpty;

  /// Whether the completion has a system fingerprint.
  bool get haveSystemFingerprint => systemFingerprint != null;

  /// Whether the completion has usage information.
  bool get haveUsage => usage != null;

  /// Custom fromJson function for the 'created' field.
  static DateTime _fromJsonCreated(int timestamp) =>
      DateTime.fromMillisecondsSinceEpoch(timestamp * 1000);

  /// Custom toJson function for the 'created' field.
  static int _toJsonCreated(DateTime date) =>
      date.millisecondsSinceEpoch ~/ 1000;
}
